service: my-cv-be
frameworkVersion: '3'
# useDotenv: true

custom:
  S3_BUCKET_NAME: demo-register-user-bucket

plugins:
  - serverless-offline
  # - serverless-dotenv-plugin
provider:
  name: aws
  runtime: nodejs14.x
  region: us-east-1
  apiGateway:
    # accepted binary type for file uploads
    binaryMediaTypes:
      - 'multipart/form-data'
  iam:
    role:
      statements:
        # Allow functions to list all buckets
        - Effect: Allow
          Action: 's3:ListBucket'
          Resource: '*'
        # Allow functions to read/write objects in a bucket
        - Effect: Allow
          Action:
            - 's3:GetObject'
            - 's3:PutObject'
          Resource:
            - 'arn:aws:s3:::${self:custom.S3_BUCKET_NAME}/*'
        - Effect: Allow
          Action:
            - 'cloudformation:DescribeStacks'
          Resource: '*'


resources:
  Resources:
     # Specifying the S3 Bucket
    LocalAssetsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.S3_BUCKET_NAME}
        # VersioningConfiguration:
        #   Status: "Enabled"
        # PublicAccessBlockConfiguration:
        #   BlockPublicAcls: True
        #   BlockPublicPolicy: True
        #   IgnorePublicAcls: True
        #   RestrictPublicBuckets: True
        # Set the CORS policy
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - HEAD
              MaxAge: 3000
    # Specifying the policies to make sure all files inside the Bucket are available to CloudFront
    LocalAssetsBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: LocalAssetsBucket
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            # - Effect: Allow
            #   Principal:
            #     AWS: arn:aws:iam::254541576558:role/Production-Transfer-ServiceRole
            #   Action:
            #     - s3:ListBucket
            #     - s3:GetBucketLocation
            #   Resource:
            #     - arn:aws:s3:::${self:custom.S3_BUCKET_NAME}
            - Effect: Allow
              Principal:
                AWS: arn:aws:iam::227325838516:user/hieunguyen
              Action:
                - s3:GetObject
                # - s3:GetObjectVersion
                - s3:PutObject
                # - s3:PutObjectAcl
                # - s3:DeleteObject
                # - s3:DeleteObjectVersion
              Resource:
                - arn:aws:s3:::${self:custom.S3_BUCKET_NAME}/*

    usersTable:
          Type: AWS::DynamoDB::Table
          Properties:
            TableName: usersTable
            AttributeDefinitions:
              - AttributeName: email
                AttributeType: S
              - AttributeName: userRole
                AttributeType: BOOL
              - AttributeName: userData
                AttributeType: M
            KeySchema:
              - AttributeName: email
                KeyType: HASH
            GlobalSecondaryIndexes:
              - IndexName: by-userRole
                KeySchema:
                  - AttributeName: category
                    KeyType: HASH
                Projection:
                  ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
functions:
  registerUser:
    handler: src/functions/registerUser.handler
    events:
      - httpApi:
          path: /register-user
          method: post
